# this can be any application server, not just Unicorn/Rainbows!
upstream app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  #TODO set unicorn socket
  # for UNIX domain socket setups:
  #server unix:/tmp/.sock fail_timeout=0;

  # for TCP setups, point these to your backend servers
  # server 192.168.0.7:8080 fail_timeout=0;
  # server 192.168.0.8:8080 fail_timeout=0;
  # server 192.168.0.9:8080 fail_timeout=0;
}

server {
  #TODO enable one of the following if you're on Linux or FreeBSD
  # listen 80 deferred; # for Linux
  # listen 80 accept_filter=httpready; # for FreeBSD

  # If you have IPv6, you'll likely want to have two separate listeners.
  # One on IPv4 only (the default), and another on IPv6 only instead
  # of a single dual-stack listener.  A dual-stack listener will make
  # for ugly IPv4 addresses in $remote_addr (e.g ":ffff:10.0.0.1"
  # instead of just "10.0.0.1") and potentially trigger bugs in
  # some software.
  # listen [::]:80 ipv6only=on; # deferred or accept_filter recommended

  #TODO set proper address
  #server_name .example.com.br;

  #TODO set path for static files
  #root /path/to/app/current/public;

  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  #
  # try_files directive appeared in in nginx 0.7.27 and has stabilized
  # over time.  Older versions of nginx (e.g. 0.6.x) requires
  # "if (!-f $request_filename)" which was less efficient:
  # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    # proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # this directive decides if nginx will intercept responses with HTTP
    # status codes of 400 and higher.
    proxy_intercept_errors on;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll/streaming.  It's also safe to set if you're using
    # only serving fast clients with Unicorn + nginx, but not slow
    # clients.  You normally want nginx to buffer responses to slow
    # clients, even with Rails 3.1 streaming because otherwise a slow
    # client can become a bottleneck of Unicorn.
    #
    # The Rack application may also set "X-Accel-Buffering (yes|no)"
    # in the response headers do disable/enable buffering on a
    # per-response basis.
    # proxy_buffering off;

    proxy_pass http://app_server;


    # ----------------------------------------------------------------------
    # Better website experience for IE users
    # ----------------------------------------------------------------------
    #
    # Force the latest IE version, in various cases when it may fall back to IE7 mode
    #  github.com/rails/rails/commit/123eb25#commitcomment-118920
    # Use ChromeFrame if it's installed for a better experience for the poor IE folk
    #
    add_header X-UA-Compatible IE=Edge,chrome=1;


    # ----------------------------------------------------------------------
    # Expires headers (for better cache control)
    # ----------------------------------------------------------------------
    #
    expires 0;
  }


  # ----------------------------------------------------------------------
  # Gzip compression
  # ----------------------------------------------------------------------
  #
  gzip on;
  gzip_static on;
  gzip_types application/atom+xml
             application/javascript
             application/json
             application/rss+xml
             application/vnd.ms-fontobject
             application/x-font-ttf
             application/xhtml+xml
             application/xml
             font/opentype
             image/svg+xml
             image/x-icon
             text/css
             text/plain
             text/x-component
             text/xml;


  # ----------------------------------------------------------------------
  # Expires headers (for better cache control)
  # ----------------------------------------------------------------------
  #
  # These are pretty far-future expires headers.
  # They assume you control versioning with filename-based cache busting
  # Additionally, consider that outdated proxies may miscache
  #   www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/
  #
  expires max;


  # ----------------------------------------------------------------------
  # Set Keep-Alive Header
  # ----------------------------------------------------------------------
  #
  # Keep-Alive allows the server to send multiple requests through one
  # TCP-connection. Be aware of possible disadvantages of this setting. Turn on
  # if you serve a lot of static content.
  #
  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  #
  keepalive_timeout 5;


  # ----------------------------------------------------------------------
  # Custom 404 page
  # ----------------------------------------------------------------------
  #
  # You can add custom pages to handle 500 or 403 pretty easily, if you like.
  # If you are hosting your site in subdirectory, adjust this accordingly
  #    e.g. error_page 404 /subdir/404.html;
  #
  error_page 404 /assets/404.html;
  error_page 422 /assets/422.html;
  error_page 500 502 503 504 /assets/500.html;


  # ----------------------------------------------------------------------
  # UTF-8 encoding
  # ----------------------------------------------------------------------
  #
  # Use UTF-8 encoding for anything served with default types
  # default: charset_types text/html text/xml text/plain text/vnd.wap.wml
  #          application/x-javascript application/rss+xml
  #
  charset utf-8;


  # ----------------------------------------------------------------------
  # A little more security
  # ----------------------------------------------------------------------
  #
  # Block access to "hidden" directories or files whose names begin with a
  # period. This includes directories used by version control systems such as
  # Subversion or Git.
  #
  location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
  }
}

